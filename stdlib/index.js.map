{
"version":3,
"file":"stdlib/index.js",
"lineCount":137,
"mappings":"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",
"sources":["node_modules/erte/src/index.js","node_modules/argufy/src/index.js","src/stdlib.js","node_modules/usually/src/index.js","node_modules/indicatrix/src/index.js"],
"sourcesContent":["import Diff from './diff'\n\nconst colors = {\n  'black': 30,\n  'red': 31,\n  'green': 32,\n  'yellow': 33,\n  'blue': 34,\n  'magenta': 35,\n  'cyan': 36,\n  'white': 37,\n  'grey': 90,\n}\n\nconst backgroundColors = {\n  'black': 40,\n  'red': 41,\n  'green': 42,\n  'yellow': 43,\n  'blue': 44,\n  'magenta': 45,\n  'cyan': 46,\n  'white': 47,\n}\n\n/**\n * Color the foreground.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function c(string, color) {\n  const cc = colors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Color the background.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function b(string, color) {\n  const cc = backgroundColors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Compares two strings and outputs a coloured version where strings don't match.\n * @param {string} source A string to compare.\n * @param {string} target Target string to compare with.\n * @returns {string} A string which uses shell-codes to highligh differences.\n */\nexport default function erte(source, target) {\n  const diff = new Diff()\n  const d = diff.diff(source, target)\n  const m = d.map(({ added, removed, value }) => {\n    let p\n    const s = value.split(' ')\n    if (added) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'green')).join(b(' ', 'green'))\n    } else if (removed) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'red')).join(b(' ', 'red'))\n    } else {\n      p = c(value, 'grey')\n    }\n    return p\n  })\n  const s = m.join('')\n  return s\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_erte.Color} Color The color to apply.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white'|'grey')} _erte.Color The color to apply.\n */\n","/**\n * @param {Array<string>} argv\n * @param {string} long\n * @param {string} [short]\n * @param {boolean} [bool]\n * @param {boolean} [number]\n */\nconst find = (argv, long, short, bool = false, number = false) => {\n  const re = short ? new RegExp(`^-(${short}|-${long})$`)\n    : new RegExp(`^--${long}$`)\n  const i = argv.findIndex(a => re.test(a))\n  if (i == -1) return { argv }\n\n  if (bool) {\n    return {\n      value: true,\n      index: i,\n      length: 1,\n    }\n  }\n\n  const j = i + 1\n  let value = argv[j]\n\n  if (!value || (typeof value == 'string' && value.startsWith('--'))) return { argv }\n\n  if (number) value = parseInt(value, 10)\n  return {\n    value,\n    index: i,\n    length: 2,\n  }\n}\n\n/**\n * Parse the config and extract arguments from the `process.argv` array.\n * @param {!_argufy.Config} config The configuration for parsing, where each key is a flag name and values are either strings, or objects with possible properties:\n *\n * - __short__ Shorthand for this argument, usually one letter.\n * - __boolean__ Does not have to be followed by a value, true if given.\n * - __number__ Parse as a number.\n * - __command__ Whether this argument can be specified as the first argument without the dash, such as `example run`.\n * - __multiple__ Extract multiple commands as an  array when `command` is set to true.\n *\n * @example\n  ```\n  const config = {\n    title: 't',       // program -t Title\n    open: {           // program -o\n      short: 'o',\n      boolean: true,\n    },\n    delay: {          // program -d 100\n      short: 'd',\n      number: true,\n    },\n    file: {           // program File.txt\n      command: true,\n    },\n    file2: {           // program File.txt File2.txt\n      command: true,\n      multiple: true,\n    },\n  }\n  ```\n * @param {!Array<string>} [args] Array with arguments to parse. `process.argv` is used by default. It is assumed that user arguments start from the 3rd position.\n * @returns {Object<string, string|Array<string>|boolean|number>} An object with all found values for the configuration request.\n */\nexport default function argufy(config = {}, args = process.argv) {\n  let [, , ...argv] = args\n  const titles = findTitles(argv)\n  argv = argv.slice(titles.length)\n  const config2 = Object.entries(config).reduce((acc, [key, value]) => {\n    if (typeof value == 'string') {\n      acc[key] = { short: value }\n    } else acc[key] = value\n    return acc\n  }, {})\n  const ranges = []\n  const res = Object.entries(config2).reduce((acc, [key, val]) => {\n    let value\n    try {\n      const { short, boolean, number, command, multiple } = val\n      if (command && multiple && titles.length) {\n        value = titles\n      } else if (command && titles.length) {\n        value = titles[0]\n      } else {\n        const r = find(argv, key, short, boolean, number)\n        ;({ value } = r)\n        const { index, length } = r\n        if (index !== undefined && length) ranges.push({ index, length })\n      }\n    } catch (err) {\n      return acc\n    }\n    if (value === undefined) return acc\n    const r = { ...acc, [key]: value }\n    return r\n  }, {})\n  let _argv = argv\n  ranges.forEach(({ index, length }) => {\n    Array.from({ length }).forEach((_, i) => {\n      const j = index + i\n      _argv[j] = null\n    })\n  })\n  _argv = _argv.filter(a => a !== null)\n  Object.assign(res, { _argv })\n  return res\n}\n\n/** @param {!Array<string>} argv */\nconst findTitles = argv => {\n  const titles = []\n  for (let i = 0; i < argv.length; i++) {\n    const a = argv[i]\n    if (a.startsWith('-')) break\n    titles.push(a)\n  }\n  return titles\n}\n\n/**\n * Based on the argufy config, creates an object that can be passed to `usually`.\n * @param {!_argufy.Config} argsConfig The configuration for parsing, where each key is a flag name and values are either strings, or objects with possible properties:\n * @example\n```\n{ 'input': 'The input to the program',\n  '--output, -o': 'The output of the program', }\n```\n */\nexport const reduceUsage = (argsConfig) => {\n  const a = Object.keys(argsConfig).reduce((acc, key) => {\n    const val = argsConfig[key]\n    if (typeof val == 'string') {\n      const k = `-${val}`\n      acc[k] = ''\n      return acc\n    }\n    let k = val.command ? key : `--${key}`\n    if (val.short) k = `${k}, -${val.short}`\n    let d = val.description\n    if (val.default) d = `${d}\\nDefault: ${val.default}.`\n    acc[k] = d\n    return acc\n  }, {})\n  return a\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_argufy.Config} Config The configuration for parsing, where each key is a flag name and values are either strings, or objects with possible properties:\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object<string, string|!_argufy.Flag>} _argufy.Config The configuration for parsing, where each key is a flag name and values are either strings, or objects with possible properties:\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_argufy.Flag} Flag The flag passed to the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _argufy.Flag The flag passed to the program.\n * @prop {string} [short] Shorthand for this argument, usually one letter.\n * @prop {boolean} [boolean=false] Whether the flag is a boolean and does not require a value. Default `false`.\n * @prop {boolean} [number=false] Specifies whether the flag should be parsed as a number. Default `false`.\n * @prop {boolean} [command=false] If set to true, the value is read from the first argument passed to the CLI command (e.g., `$ cli command`). Default `false`.\n * @prop {boolean} [multiple=false] When using the `command` property, will parse the commands as an array. Default `false`.\n * @prop {string} [default] The default value for the argument. Does not actually set the value, only used in reducing the usage info (`argufy` bin on the other hand will set the default).\n * @prop {string} [description] The description to be used by `usually`.\n */\n","import { c } from 'erte'\n/* bin-start */\nimport argufy, { reduceUsage } from 'argufy'\nimport usually from 'usually'\nimport indicatrix from 'indicatrix'\n/* bin-end */\n\nmodule.exports = {\n  'c': c,/* bin-start */\n  'reduceUsage': reduceUsage,\n  'argufy': argufy,\n  'usually': usually,\n  'indicatrix': indicatrix,/* bin-end */\n}","/**\n * Generate a usage string.\n * @param {!_usually.Config} config The configuration object.\n * @param {!Object<string, string>} config.usage The map with possible arguments (flags, options) and their information.\n * @param {string} [config.description] What does the program do?\n * @param {string} [config.line] The summary of the program in one line.\n * @param {string} [config.example] The example of the program usage.\n * @example\n```\nimport usually from 'usually'\n\nconst res = usually({\n  usage: {\n    '-h': 'print help',\n    '-c': 'execute this command',\n  },\n  description: 'A test command-line application',\n  line: 'usually [-c command|command2] [-h]',\n  example: 'usually -c command2',\n})\n// A test command-line application\n//\n//  usually [-c command|command2] [-h]\n//\n//        -h      print help\n//        -c      execute this command\n//\n//  Example:\n//\n//    usually -c command2\n//\n```\n */\nexport default function usually(config = { usage: {} }) {\n  const {\n    usage = {},\n    description,\n    line,\n    example,\n  } = config\n  const commands = Object.keys(usage)\n  const descriptions = Object.values(usage)\n\n  const [commandLength] = commands.reduce(([longestName = 0, longestDescription = 0], name) => {\n    const command = usage[name]\n    const theLongest = command.split('\\n')\n      .reduce((acc, c) => {\n        if (c.length > acc) return c.length\n        return acc\n      }, 0)\n    if (theLongest > longestDescription) longestDescription = theLongest\n    if (name.length > longestName) longestName = name.length\n    return [longestName, longestDescription]\n  }, [])\n\n  const pad = (string, length) => {\n    const l = length - string.length\n    const ts = ' '.repeat(l)\n    const s = `${string}${ts}`\n    return s\n  }\n\n  const usa = commands.reduce((acc, command, i) => {\n    const value = descriptions[i]\n    const vals = value.split('\\n')\n    const c = pad(command, commandLength)\n    const [firstVal, ...otherVals] = vals\n    const firstLine = `${c}\\t${firstVal}`\n    const emptyPad = pad('', commandLength)\n    const otherLines = otherVals.map(val => {\n      const r = `${emptyPad}\\t${val}`\n      return r\n    })\n    const res = [...acc, firstLine, ...otherLines]\n    return res\n  }, [])\n\n  const USA = usa.map(a => `\\t${a}`)\n  const s = [\n    description,\n    `  ${line || ''}`,\n  ].filter(l => l ? l.trim() : l).join('\\n\\n')\n  const u = `${s ? `${s}\\n` : ''}\n${USA.join('\\n')}\n`\n\n\n  if (example) {\n    return `${u}\n  Example:\n\n    ${example}\n`\n  }\n\n  return u\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_usually.Config} Config The configuration object.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _usually.Config The configuration object.\n * @prop {!Object<string, string>} usage The map with possible arguments (flags, options) and their information.\n * @prop {string} [description] What does the program do?\n * @prop {string} [line] The summary of the program in one line.\n * @prop {string} [example] The example of the program usage.\n */\n","/**\n * Will print the loading text and refresh the CLI line to show the ellipsis while the promise is loading.\n * @param {string} text The text to display in the CLI.\n * @param {!Promise<T>|function(...*): !Promise<T>} promise The promise or an async function that returns the promise.\n * @param {!_indicatrix.Options} [options] The optional options for the indicator, such as the refresh interval.\n * @param {number} [options.interval=250] The interval with which to update the screen. Default `250`.\n * @param {!(NodeJS.WriteStream|stream.Writable)} [options.writable=\"process.stdout\"] The writable stream used for printing data with the `.write` method. Default `process.stdout`.\n * @template T\n */\nexport default async function indicatrix(text, promise, options = {}) {\n  const { interval = 250, writable = process.stdout } = options\n  const p = typeof promise == 'function' ? promise() : promise\n  const write = writable.write.bind(writable)\n\n  const { 'INDICATRIX_PLACEHOLDER': placeholder } = process.env\n  if (placeholder && placeholder != '0') {\n    write(`${text}<INDICATRIX_PLACEHOLDER>`)\n    return await p\n  }\n\n  let i = 1\n  const getText = () => `${text}${'.'.repeat(i)}`\n  const clear = () => write(`\\r${' '.repeat(text.length + 3)}\\r`)\n  let s = getText()\n  write(s)\n  const int = setInterval(() => {\n    i = (i + 1) % 4\n    s = getText()\n    clear()\n    write(s)\n  }, interval)\n  try {\n    const res = await p\n    return res\n  } finally {\n    clearInterval(int)\n    clear()\n  }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Options} _indicatrix.Options\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Writable} stream.Writable\n */"],
"names":["colors","find","argv","long","short","bool","number","re","RegExp","i","findIndex","a","test","value","index","length","startsWith","parseInt","findTitles","titles","push","module","exports","c","string","color","cc","argsConfig","reduceUsage","Object","keys","reduce","acc","key","val","k","command","d","description","default","argufy","config","args","process","slice","config2","entries","ranges","res","boolean","multiple","r","undefined","err","_argv","forEach","Array","from","_","filter","assign","usually","usage","line","example","commands","descriptions","values","commandLength","longestName","longestDescription","name","theLongest","split","pad","ts","repeat","s","USA","usa","vals","firstVal","otherVals","firstLine","emptyPad","otherLines","map","l","trim","join","u","indicatrix","text","promise","options","interval","writable","stdout","p","write","bind","placeholder","env","int","setInterval","clearInterval"]
}
